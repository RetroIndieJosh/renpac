# TODO disable coloration of double and single quotes in cfg files (since they're not used anyway)

# note that config doesn't care about spaces because everything is indexed with
# a string, so you can have an "item.red card" and don't need to call it
# "item.red_card"

# AVOID USING QUOTES! these will horribly break the generator

# within the script, everything is referenced by name within context
# - example: 
#     "target = foyer" in an exit definition expands to "target = room.foyer" 
# - another example: 
#     "items = red card, blue card" in a room definition expands to 
#     "items = item.red card, item.blue card"

# currently no support for duplication - an item can only exist once

# if an item or exit is not given a location, it will be placed in the
# inaccessible "nowhere" location but can be referenced by name elsewhere in the
# script

# reserved: room.inventory, room.nowhere, item.player (for "self" reference)

# define global game features
[game]
# the name of the game (currently unused)
name = "Bardolf's Curse"
# the starting room
start = cell
# the default size for items
item_size = 128, 128
# the default size for exits
exit_size = 256, 256

# define features for the inventory setup
[inventory]
# can be bottom, left, right, or top
pos = bottom
# how much space perpendicular to the attached side for items
length = 1100
# how far the inventory sticks out from the attached side
depth = 200
# items in the inventory, i.e. the player starts with these
items = coin

# define an item
# the item name must match its image, i.e. "{name}.png"
[item.coin]
# description for when the item is examined
desc = This special coin depoicting a three-legged horse is from an ancient group called the Hunters. 
    Other than that, you do not know much about it.

# define a room
# the room name must match its image, i.e. "bg {name}.png"
[room.cell]
# the printed name can differ from the script name
printed = Dungeon Cell
# a description printed before desc the first time the player enters the room
first = You wake with a vicious pounding in your head and find yourself on the upper floor of a tower. 
    Looks like a cell.
# a description of the room to print when entered
desc = A foul stench assaults you from all around. In one wall a slit serves as a window, letting in just enough 
        light to see.
items = gruel, shackles

[item.gruel]
# a custom message for taking the item
take = You almost vomit as you approach the stinky gruel, but take it in case you are hungry enough to eat it later.
# a list of combinations for using this item on others
combines = gruel_stairs, gruel_shackles
# position of the item's top left corner in pixels from the top left of the screen (x, y)
# - if this is not set, the item will default to (0, 0) - but this is meaningless
#   for items that start in inventory or nowhere
pos = 1150 430
# size of the item in pixels (width, height)
# - if this is not set, the item will default to game.item size (useful if all items are the same size)
size = 100 75

[item.shackles]
# fixed in place so the player can't take it ('yes' or 'no', if omitted defaults to 'no')
fixed = yes
desc = Rusty shackles chain you to the ground. They look weak, though.
pos = 800 700
size = 200 126

[item.gruel + exit.stairs down]
message = You dump the gruel down the stairs. And now you are gonna stay hungry.
# one of: none, self, target, both
# - none: delete nothing (the default if this field is omitted)
# - self: delete the item being used
# - other: delete the target item/exit
# - both: delete both
delete = self

[item.gruel + item.shackles]
message = You dump the gruel on the shackles. Great, now the mess is even worse!
delete = self
# one of: none, self, target (same as "delete" but no option for both)
# - if you want to "combine" two items into one, set one as "delete" and another
#   as "replace" so the "with" item appears at the "replace" item's location
# - if "replace" is defined but "with" is not, it effectively acts as "delete"
# - if "delete" and "replace" are defined as the same, the "delete" is ignored
replace = other
# the item to replace the "replace" item with
# - if "replace" is not defined, this is ignored
# - this item will be positioned to match the "replace" hotspot's location;
#   ideally, they will be of the same size or this may look weird
with = messy shackles

[item.messy shackles]
fixed = yes
description = These shackles are covered in gruel, ick!
pos = 800 700
size = 200 126

# define an exit
[exit.stairs down]
pos = 0 580 
size = 467 300
# an additional message to print when activated, before describing the next room
message = You descend the stairs.
# the location where the exit exists
location = cell
# the location to which the exit leads (no need to include "room." prefix)
target = guardhouse

[room.guardhouse]
printed = Guardhouse
desc = This guardhouse has seen better days. Was it attacked recently? Stairs lead back up to the cell.

[exit.stairs up]
pos = 1575 0
size = 345 166
printed = stairs up
message = You ascend the stairs.
location = guardhouse
target = cell

# nested items example
[item.food bag]
items = bread, cheese
desc = This bag smells of delicious food!