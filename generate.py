from dataclasses import dataclass
import os

SCRIPT_DIR = "game"

class GeneratorFile:
    def __init__(self, name) -> None:
        self.name = name
        with open(f"{SCRIPT_DIR}/{name}.py") as file:
            self.lines = file.read().splitlines()
        self.priority = 0
        self.is_dependency = False
        self.dependencies = []
        self.dependency_names = []

    def check_priority(self):
        if self.lines[0].startswith("#priority"):
            self.set_max_priority(int(self.lines[0].split("#priority ", 1)[1]))

    def find_dependencies(self):
        print(f"{self.name}:")
        for line in self.lines:
            if not line.startswith("from . import"):
                continue
            self.dependency_names = line.split("from . import ", 1)[1].split(", ")

    def link_dependencies(self):
        global files
        for dependency_name in self.dependency_names:
            if dependency_name not in files:
                raise Exception(f"Missing dependency for {self.name}: '{dependency_name}'")
            
            dependency = files[dependency_name]
            dependency.is_dependency = True
            self.dependencies.append(dependency)

    # set priority to at most the given priority
    def set_max_priority(self, priority):
        self.priority = min(self.priority, priority)
        if self.priority < -999:
            raise Exception(f"Illegal priority for {self.name} - must be in range [-999, 999] to avoid clash with Ren'Py")

    def set_priority(self, priority=0):
        self.set_max_priority(priority)
        for dependency in self.dependencies:
            dependency.set_priority(priority - 1)

    def write(self) -> None:
        print(f"convert {self.name} at priority {self.priority}", end='')
        with open(f"{SCRIPT_DIR}/{self.name}.gen.rpy", "w") as file:
            file.write("# THIS FILE WAS GENERATED BY RENPAC! DO NOT MODIFY MANUALLY AS CHANGES MAY BE OVERWRITTEN\n")
            file.write(f"# To make changes, modify {name}.py and run the generator again.\n\n")
            file.write(f"init {self.priority} python:\n")
            for line in self.lines:
                file.write(f"    {line}\n")
        print(f" => {self.name}.gen.rpy ({len(self.lines)} lines)")

files = {}

def cleanup():
    gen_files = list(filter(lambda file_name: file_name.endswith(".gen.rpy"), os.listdir(SCRIPT_DIR)))
    print(f"cleaning up {len(gen_files)} files")
    for gen_file_name in gen_files:
        os.remove(f"{SCRIPT_DIR}/{gen_file_name}")

def indent(depth=1):
    tab = "    "
    for _ in range(depth):
        print(tab, end='')

cleanup()

ignore_list = [ "generate.py" ]
filenames = list(filter(lambda file_name: file_name.endswith(".py") and file_name not in ignore_list, os.listdir(SCRIPT_DIR)))

if(len(filenames) == 0):
    print("no files!")
    exit()

print(f"** loading files")
priority = 0
for py_file_name in filenames:
    name = os.path.splitext(py_file_name)[0]
    files[name] = GeneratorFile(name)

print(f"** reading dependencies")
for key in files:
    files[key].find_dependencies()

print(f"** linking dependencies")
for key in files:
    files[key].link_dependencies()

print(f"** setting priorities")
root_files = []
for key in files:
    if not files[key].is_dependency:
        root_files.append(files[key])
for file in root_files:
    print(f"  -- root file: {file.name}")
for file in root_files:
    file.set_priority()

print(f"** checking manual priorities")
for key in files:
    files[key].check_priority()

print(f"** generating {len(files)} files")
for key in files:
    files[key].write()

print("** done")
