from pathlib import Path
from typing import List, Optional, Tuple

from datetime import datetime

from renpac.base.printv import *

TAB = "    "

class RenpyScript:
    def __init__(self, output_path: Path, priority: int = 0, 
                source_path: Optional[str] = None, 
                indent = 4) -> None:
        self._output_path: Path = output_path
        self._priority: int = priority
        self._source_path: Optional[str] = source_path
        self._indent_str: str = ' ' * indent

        self._python: List[str] = []
        self._renpy: List[str] = []

    def add_header(self, header: str, python: bool = True) -> None:
        header_lines: List[str] = [
            "",
            "#######################",
            f"# {header}",
            "#######################"]
        if python:
            self.add_python(*header_lines)
        else:
            self.add_renpy(*header_lines)

    def add_python(self, *args: str) -> None:
        self._python += [f"{line}\n" for line in list(args)]
    
    def add_renpy(self, *args: str) -> None:
        self._renpy += [f"{line}\n" for line in list(args)]

    def clear(self) -> None:
        self._python = []
        self._renpy = []
    
    def print(self) -> None:
        printv(self._python)
        printv(self._renpy)

    def is_empty(self) -> bool:
        return len(self._python) + len(self._renpy) == 0

    # TODO should we genericize script to be able to write any script? and put
    # the init [priority] python higher up? maybe RenpyScript(Script)
    def write(self) -> None:
        if self.is_empty():
            return
        self._output_path.parent.mkdir(exist_ok = True)
        with open(self._output_path, "w") as file:
            file.writelines([
                f"# Generated by renpac v0.0 at {datetime.now()}\n",
                "# THE FOLLOWING WAS GENERATED BY RENPAC\n",
                "# DO **NOT** MODIFY MANUALLY, AS CHANGES MAY BE OVERWRITTEN!\n"])
            if self._source_path is not None:
                file.writelines([
                    "\n# To make changes, modify:\n",
                    f"# {self._indent_str}{self._source_path}\n",
                    "# and run the generator again.\n"])
            file.writelines(self._renpy)
            file.write(f"\ninit {self._priority} python:\n")
            file.writelines([f"{self._indent_str}{line}" for line in self._python])

if __name__ == "__main__":
    path: Path = Path(__file__).parent.joinpath("test.gen.rpy")

    indent_str = input("Indent? (blank for default) ")
    indent = 4 if indent_str == "" else int(indent_str)

    script = RenpyScript(path, 89, "RenpyScript test function", indent)

    script.add_header("test python header")
    script.add_header("test renpy header", False)
    script.add_python("test python line")
    script.add_renpy("test renpy line")

    script.write()

    EXPECTED_LINES = 19
    line_count = len(path.read_text().splitlines())
    if line_count == EXPECTED_LINES:
        print(f"Line count matches.")
    else:
        print(f"Something went wrong. Expected {EXPECTED_LINES} lines but wrote {line_count}.")

    input(f"Test file written to {path}.\nPress enter to delete and end tests.")
    path.unlink()