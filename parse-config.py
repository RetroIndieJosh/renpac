import configparser
from dataclasses import dataclass

GAME_NAME = "bardolf"
CONFIG_FILE = f"{GAME_NAME}.cfg"

TYPE_STRING = 0
TYPE_LITERAL = 1 # for numbers, functions, and references to other objects
TYPE_BOOL = 2

class VariableMap:
    def __init__(self, config_key: str, python_key: str = None, type: int = TYPE_STRING) -> None:
        self.config_key = config_key
        self.python_key = python_key if python_key is not None else config_key
        self.type = type

    def process(self, config_key: str, python_name: str):
        if not self.config_key in config[config_key]:
            print(f"ERROR: no key '{self.config_key}' in config")
            return
        if self.type == TYPE_LITERAL:
            value = config[config_key][self.config_key].replace(' ', '_')
        elif self.type == TYPE_BOOL:
            value = True if config[config_key][self.config_key] == "yes" else False
        else:
            text = config[config_key][self.config_key].replace('\n', ' ')
            value = f"\"{text}\""
        add_line(f"{python_name}.{self.python_key} = {value}")

def add_line(line: str) -> None:
    global script
    script += f"{line}\n"

def parse_exit(name: str) -> bool:
    add_line(f"{name} = exit()")

    config_key = f"exit.{name}"
    python_name = name.replace(' ', '_')
    process_varmaps(exit_varmaps, config_key, python_name)

def parse_item(name: str) -> bool:
    add_line(f"{name} = Item()")

    config_key = f"item.{name}"
    python_name = name.replace(' ', '_')
    process_varmaps(item_varmaps, config_key, python_name)

def parse_room(name: str) -> bool:
    add_line(f"{name} = Room()")

    config_key = f"room.{name}"
    python_name = name.replace(' ', '_')
    process_varmaps(room_varmaps, config_key, python_name)

    hotspots = []
    hotspot_types = ["exit", "item"]
    for hotspot_type in hotspot_types:
        hotspot_key = f"{hotspot_type}s"
        if hotspot_key in config[config_key]:
            for hotspot in config[config_key][hotspot_key].split(','):
                hotspots.append(hotspot.strip())
    for hotspot in hotspots:
        if hotspot not in game_exits and hotspot not in game_items:
            print(f"ERROR: hotspot '{hotspot}' for room '{name}' does not exist")
        add_line(f"{python_name}.hotspot_add({hotspot.replace(' ', '_')})")

def process_varmaps(varmaps: list, key: str, python_name: str):
    for varmap in varmaps:
        varmap.process(key, python_name)

config = configparser.ConfigParser()
if len(config.read(CONFIG_FILE)) == 0:
    raise Exception(f"could not open or no data in game config '{CONFIG_FILE}'")

combos = []
game_exits = []
game_items = []
rooms = []
print("parsing objects")
for section_name in config.sections():
    print(f" -- '{section_name}'")
    if '.' not in section_name:
        continue
    parts = section_name.split('.')
    if len(parts) > 2:
        print(f"too many parts to section name '{section_name}")
        continue
    type_name = parts[0]
    element_name = parts[1]
    if type_name == "combo":
        combos.append(element_name)
    elif type_name == "exit":
        game_exits.append(element_name)
    elif type_name == "item":
        game_items.append(element_name)
    elif type_name == "room":
        rooms.append(element_name)
    else:
        print(f"unknown type '{type_name}'")

print(f"combos: {combos}")
print(f"exits: {game_exits}")
print(f"items: {game_items}")
print(f"rooms: {rooms}")

script = ""

room_varmaps = [
    VariableMap("desc"),
    VariableMap("first", "first_desc"),
    VariableMap("printed", "printed_name")
]

item_varmaps = [
    VariableMap("desc"),
    VariableMap("printed", "printed_name"),
    VariableMap("fixed", type=TYPE_BOOL)
]

for item in game_items:
    parse_item(item)
for room in rooms:
    parse_room(room)

"""
    if 'desc' in config[key]:
        script += f"{name}.desc = {config[key]['desc']}"
    elif 'printed' in config[key]:
        script += f"{name}.printed_name = {config[key]['desc']}"
"""

print("\n\n***SCRIPT***\n")
print(script)

with open(f"game/{GAME_NAME}.rpy", "w") as file:
    file.write("# THIS FILE WAS GENERATED BY RENPAC! DO NOT MODIFY MANUALLY AS CHANGES MAY BE OVERWRITTEN\n")
    file.write(f"# To make changes, modify {CONFIG_FILE} and run the generator again.\n\n")
    file.write(f"init python:\n")
    file.write(f"    def load_game():\n")
    for line in script.splitlines():
        file.write(f"        {line}\n")