# hotspots (items and exits) are always attached to either a room or the
#   inventory, so the room acts as a namespace
#   i.e., cell.stair_down and library.stair_down technically have the same name
#   but are identified by their initial location

# items in the inventory are referred to as such, i.e. inventory.coin

# within a room, the room name can be dropped from the identifier; i.e. "gruel"
#   is assumed to be "cell.gruel" in the definition of the "cell" room

# to check:
#  - no two rooms have the same name
#  - no two items in the same room have the same name
#  - no rooms are called "game" or "inventory"

[game]
# the placement of the inventory; can be bottom, left, right, or top
inventory = top

# an item definition which will be referenced with the name "coin"
# since the room is "inventory" this will start in the player's inventory
# the item name must match its images, i.e. {item}_idle and {item}_hover
[inventory.coin]
# the type is item
type = item
# description for when the item is examined
desc = This special coin depoicting a three-legged horse is from an ancient group called the Hunters. 
    Other than that, you do not know much about it.

# a room definition which will be referenced with the name "cell"
# the room name must match its image, i.e. "bg {name}.png"
[cell]
# the type is room
type = room
# the printed name of the room when the text refers to it
printed = Dungeon Cell
# a description printed before ${desc} the first time the player enters the room
first_desc = You wake with a vicious pounding in your head and find yourself on the upper floor of a tower. 
    Looks like a cell.
# the description of the room when examined or revisited
desc = A foul stench assaults you from all around. In one wall a slit serves as a window, letting in just enough 
        light to see. Someone was kind enough to leave you a bowl of gruel.

# an exit is named {room}.{name}
[cell.stairs_down]
type = exit
# the location and size of the exit hotspot as left, top, width, height
#   should be left, top, right, bottom and calculated at load time - easier
#   to determine manually, and easier on the eventual editor
area = 0 782 467 307
# an additional message to print when activated, before describing the next room
message = "You descend the stairs."
# the location to which the exit leads
target = guardhouse

[guardhouse]
type = room
printed = Guardhouse
desc = This guardhouse has seen better days. Was it attacked recently? Stairs lead back up to the cell.
items = gruel 0.6 0.6

[guardhouse.stairs_up]
type = exit
area = 1575 0 345 166
message = "You ascend the stairs."
target = cell

# an item is named {room}.{name} and initially placed in the given room
[guardhouse.gruel]
type = item
# initial position of the item in the room (ignored if in inventory) 
pos = 0.6 0.6
# comma-separated list of actions triggered when this item is combined with
#   (used on) a target hotspot in the format {location}.{target_name} {func}
# the function must be defined in global scope of the game's script, as it will
#   be called when the combination is made (must also be of type func() -> None)
combines = guardhouse.stairs_down gruel_stairs, 
    guardhouse.shackles gruel_shackles

[guardhouse.shackles]
type = item
pos = 0.8 0.8

# nested items example
[cell.bag]
type = item
pos = 0.4 0.6

# an item inside an item (can be infinitely nested)
# this also flags the second to last item as a container (in this case, cell.bag)
[cell.bag.jewel]
type = item