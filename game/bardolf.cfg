# TODO disable coloration of double and single quotes in cfg files (since they're not used anyway)

# note that config doesn't care about spaces because everything is indexed with
# a string, so you can have an "item.red card" and don't need to call it
# "item.red_card"

# quotes are never needed; if you use quotes in a string, they will be literally
# included in that string

# within the script, everything is referenced by name within context
# - example: 
#     "target = foyer" in an exit definition expands to "target = room.foyer" 
# - another example: 
#     "items = red card, blue card" in a room definition expands to 
#     "items = item.red card, item.blue card"

# currently no support for duplication - an item can only exist once

# if an item or exit is not given a location, it will be placed in the
# inaccessible "nowhere" location but can be referenced by name elsewhere in the
# script

# reserved: room.inventory, room.nowhere, item.player (for "self" reference)

# define features for the inventory setup
[inventory]
# can be bottom, left, right, or top
pos = bottom
# how much space perpendicular to the attached side for items
length = 1100
# how far the inventory sticks out from the attached side
depth = 200
# items in the inventory, i.e. the player starts with these
items = coin

# define an item
# the item name must match its image, i.e. "{name}.png"
[item.coin]
# the type is item
type = item
# description for when the item is examined
desc = This special coin depoicting a three-legged horse is from an ancient group called the Hunters. 
    Other than that, you do not know much about it.

# define a room
# the room name must match its image, i.e. "bg {name}.png"
[room.cell]
# the printed name can differ from the script name
printed = Dungeon Cell
# a description printed before desc the first time the player enters the room
first_desc = You wake with a vicious pounding in your head and find yourself on the upper floor of a tower. 
    Looks like a cell.
# a description of the room to print when entered
desc = A foul stench assaults you from all around. In one wall a slit serves as a window, letting in just enough 
        light to see.
exits = cell stairs
items = gruel, shackles

[item.gruel]
# a custom message for taking the item
take = You almost vomit as you approach the stinky gruel, but take it in case you are hungry enough to eat it later.
# a list of combinations for using this item on others
combines = gruel_stairs, gruel_shackles

[combo.gruel_stairs]
# the target hotspot - if an exit, must use exit. prefix
target = exit.cell stairs
# the functioon to trigger when the combination occurs; this must be defined in
# a python script compiled with the game or it will throw an exception
func = gruel_stairs

[combo.gruel_shackles]
# the targeted hotspot - since it's an item, we can omit the item. prefix
target = shackles
# the functioon to trigger when the combination occurs; this must be defined in
# a python script compiled with the game or it will throw an exception
func = gruel_stairs

# define an exit
[exit.cell stairs]
# left, top, right, bottom
area = 0 782 467 307
# an additional message to print when activated, before describing the next room
message = You descend the stairs.
# the location to which the exit leads (no need to include "room." prefix)
target = guardhouse

[room.guardhouse]
printed = Guardhouse
desc = This guardhouse has seen better days. Was it attacked recently? Stairs lead back up to the cell.
exits = guardhouse stairs

[exit.guardhouse stairs]
printed = stairs up
area = 1575 0 345 166
message = You ascend the stairs.
target = cell

# nested items example
[item.food bag]
items = bread, cheese
desc = This bag smells of delicious food!