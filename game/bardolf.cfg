# hotspots (items and exits) are always attached to either a room or the
#   inventory, so the room acts as a namespace
#   i.e., cell.stair_down and library.stair_down technically have the same name
#   but are identified by their initial location

# items in the inventory are referred to as such, i.e. inventory.coin

# within a room, the room name can be dropped from the identifier; i.e. "gruel"
#   is assumed to be "cell.gruel" in the definition of the "cell" room

# a special definition for player settings
[player]
# a comma-separated list of items in the starting inventory
inventory = coin

# an item definition which will be referenced with the name "coin"
[coin]
# the type is item
type = item
# description for when the item is examined
desc = This special coin depoicting a three-legged horse is from an ancient group called the Hunters. 
    Other than that, you do not know much about it.

# a room definition which will be referenced with the name "cell"
[cell]
# the type is room
type = room
# the printed name of the room when the text refers to it
printed = Dungeon Cell
# a description printed before ${desc} the first time the player enters the room
first_desc = You wake with a vicious pounding in your head and find yourself on the upper floor of a tower. 
    Looks like a cell.
# the description of the room when examined or revisited
desc = A foul stench assaults you from all around. In one wall a slit serves as a window, letting in just enough 
        light to see. Someone was kind enough to leave you a bowl of gruel.
# a comma-separated list of items also defining their position, i.e. {name} {x} {y}
items = gruel 0.6 0.6, 
    shackles 0.8 0.8
# TODO should this be left, top, right, bottom and then calculated at load time? could be easier to manually determine (and easier on the eventual editor)
# a comma-separated list of exits also defining their area, i.e. {name} {left} {top} {width} {height}
exits = stairs_down guardhouse 0 782 467 307

[guardhouse]
type = room
printed = Guardhouse
desc = This guardhouse has seen better days. Was it attacked recently? Stairs lead back up to the cell.
exits = stairs_up cell 1575 0 345 166
items = gruel 0.6 0.6

[gruel]
type = item
# comma-separated list of actions triggered when this item is combined with
#   (used on) a target hotspot in the format {location}.{target_name} {func}
# the function must be defined in global scope of the game's script, as it will
#   be called when the combination is made (must also be of type func() -> None)
combines = guardhouse.stairs_down gruel_stairs, 
    guardhouse.shackles gruel_shackles

[shackles]
type = item