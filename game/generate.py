import os

DEPENDENCY_DEPTH_MAX = 10

base_priority = 0
generated = []

def check_dependency(line, offset):
    if not line.startswith("from ."):
        return

    dependencies = line.split("from . import ", 1)[1]
    for dependency in dependencies.split(", "):
        dependency = dependency.strip()
        indent(-offset + 1)
        print(f"-- checking dependency {dependency}")
        if dependency not in generated:
            write_file(dependency, offset - 1)

def get_priority(line) -> int:
    if not line.startswith("#priority"):
        return base_priority

    return int(line.split("#priority ", 1)[1])

def cleanup():
    gen_files = list(filter(lambda file_name: file_name.endswith(".gen.rpy"), os.listdir()))
    print(f"cleaning up {len(gen_files)} files")
    for gen_file_name in gen_files:
        os.remove(gen_file_name)

def indent(depth=1):
    tab = "    "
    for _ in range(depth):
        print(tab, end='')

def write_file(name, offset=0):
    global generated
    if name in generated:
        return

    priority = base_priority + offset
    if priority >= DEPENDENCY_DEPTH_MAX:
        print("ERROR: maximum dependency depth reached, is there a circular dependency?")
        exit(1)

    with open(f"{name}.py") as file:
        file_data = file.read()

    indent(-offset)
    with open(f"{name}.gen.rpy", "w") as file:
        write_warning(name, file)

        lines = file_data.splitlines()
        priority = get_priority(lines[0])

        print(f"convert {name} at priority {priority}")
        file.write(f"init {priority} python:\n")
        for line in file_data.splitlines():
            check_dependency(line, offset)
            file.write(f"    {line}\n")

    indent(-offset)
    print(f" => {name}.gen.rpy ({len(lines)} lines)")

    generated.append(name)

def write_warning(name, file):
    file.write("# THIS FILE WAS GENERATED BY RENPAC! DO NOT MODIFY MANUALLY AS CHANGES MAY BE OVERWRITTEN\n")
    file.write(f"# To make changes, modify {name}.py and run the generator again.\n\n")

cleanup()

ignore_list = [ "generate.py" ]
files = list(filter(lambda file_name: file_name.endswith(".py") and file_name not in ignore_list, os.listdir()))

if(len(files) == 0):
    print("no files!")
    exit()

print(f"generating {len(files)} files")
base_priority = 0
for py_file_name in files:
    name = os.path.splitext(py_file_name)[0]
    write_file(name)
    base_priority += 1

print("done")
